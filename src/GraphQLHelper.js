const { buildSchema, GraphQLScalarType } = require('graphql');
const makeExecutableSchema = require('graphql-tools');
const { Kind } = require('graphql/language');

const SequelizeDataTypeMapper = require('./SequelizeDataTypeMapper');

const graphqlHelper = {
    generateSchemas: (sequelizeModels) => {
        let models = [];
        let queries = [];
        let mutations = [];

        sequelizeModels.forEach((sequelizeModel) => {
            const modelName = sequelizeModel.name;
            const modelAttributes = sequelizeModel.rawAttributes;

            let primaryKey = 'id: Int!';
            let columns = [];
            let columnsRequiredToCreate = [];
            Object.keys(modelAttributes).forEach((attrKey) => {
                const attrName = attrKey;
                const attribute = modelAttributes[attrKey];
                const dataType = SequelizeDataTypeMapper[attribute.type.key];

                if (attribute.primaryKey) {
                    primaryKey = `${attrKey}: ${dataType}!`;
                }

                const isRequired = attribute.primaryKey || !attribute.allowNull;
                const isEssential =
                    !attribute.primaryKey &&
                    !attribute.allowNull &&
                    !attribute.defaultValue &&
                    !attribute._autoGenerated;

                columns.push(`${attrKey}: ${dataType}${isRequired ? '!' : ''}`);

                if (isEssential) {
                    columnsRequiredToCreate.push(`${attrKey}: ${dataType}!`);
                }
            });

            // prettier-ignore
            models.push(`
                type ${modelName} {
                    ${columns.join('\n')}
                }
                type ${modelName}_page {
                    count: Int!
                    rows: [${modelName}]
                }
            `.trim());

            // prettier-ignore
            queries.push(`
                read_${modelName}(${primaryKey}): ${modelName}
                read_multiple_${modelName}(offset: Int!, limit: Int!): ${modelName}_page
            `.trim());

            // prettier-ignore
            mutations.push(`
                create_${modelName}(${columnsRequiredToCreate.join(', ')}): ${modelName}
                update_${modelName}(${columns.join(', ')}): ${modelName}
            `.trim());
        });

        const schema = buildSchema(`
            scalar Date

            ${models.join('\n')}

            type Query {
                ${queries.join('\n')}
            }

            type Mutation {
                ${mutations.join('\n')}
            }
        `);

        return schema;
    },

    generateResolvers: (sequelizeModels) => {
        const root = {
            // Custom scalar types
            Date: new GraphQLScalarType({
                name: 'Date',
                description: 'Date custom scalar type',
                parseValue(value) {
                    return new Date(value); // value from the client
                },
                serialize(value) {
                    return value.getTime(); // value sent to the client
                },
                parseLiteral(ast) {
                    if (ast.kind === Kind.INT) {
                        return new Date(ast.value); // ast value is always in string format
                    }
                    return null;
                },
            }),
        };

        sequelizeModels.forEach((sequelizeModel) => {
            const modelName = sequelizeModel.name;

            root[`read_${modelName}`] = ({ id }) => {
                return sequelizeModel.findByPk(id);
            };

            root[`read_multiple_${modelName}`] = (offset, limit) => {
                return sequelizeModel.findAndCountAll({
                    where: {},
                    offset: offset,
                    limit: limit,
                });
            };

            root[`create_${modelName}`] = (newItem) => {
                return sequelizeModel.create(newItem, { returning: true });
            };

            root[`update_${modelName}`] = (updatedItem) => {
                return sequelizeModel.update(updatedItem, {
                    where: {
                        id: updatedItem.id,
                    },
                });
            };
        });

        return root;
    },
};

module.exports = graphqlHelper;
